// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: pb/office.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OfficeClient is the client API for Office service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfficeClient interface {
	GetByID(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*OfficeResponse, error)
	FindByCurrent(ctx context.Context, in *CurrentRequest, opts ...grpc.CallOption) (*OfficeResponseList, error)
	FindInIDs(ctx context.Context, in *IDsRequest, opts ...grpc.CallOption) (*OfficeResponseList, error)
	Save(ctx context.Context, in *OfficeBaseRequest, opts ...grpc.CallOption) (*OfficeBaseResponse, error)
}

type officeClient struct {
	cc grpc.ClientConnInterface
}

func NewOfficeClient(cc grpc.ClientConnInterface) OfficeClient {
	return &officeClient{cc}
}

func (c *officeClient) GetByID(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*OfficeResponse, error) {
	out := new(OfficeResponse)
	err := c.cc.Invoke(ctx, "/Office/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeClient) FindByCurrent(ctx context.Context, in *CurrentRequest, opts ...grpc.CallOption) (*OfficeResponseList, error) {
	out := new(OfficeResponseList)
	err := c.cc.Invoke(ctx, "/Office/FindByCurrent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeClient) FindInIDs(ctx context.Context, in *IDsRequest, opts ...grpc.CallOption) (*OfficeResponseList, error) {
	out := new(OfficeResponseList)
	err := c.cc.Invoke(ctx, "/Office/FindInIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officeClient) Save(ctx context.Context, in *OfficeBaseRequest, opts ...grpc.CallOption) (*OfficeBaseResponse, error) {
	out := new(OfficeBaseResponse)
	err := c.cc.Invoke(ctx, "/Office/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfficeServer is the server API for Office service.
// All implementations must embed UnimplementedOfficeServer
// for forward compatibility
type OfficeServer interface {
	GetByID(context.Context, *IDRequest) (*OfficeResponse, error)
	FindByCurrent(context.Context, *CurrentRequest) (*OfficeResponseList, error)
	FindInIDs(context.Context, *IDsRequest) (*OfficeResponseList, error)
	Save(context.Context, *OfficeBaseRequest) (*OfficeBaseResponse, error)
	mustEmbedUnimplementedOfficeServer()
}

// UnimplementedOfficeServer must be embedded to have forward compatible implementations.
type UnimplementedOfficeServer struct {
}

func (UnimplementedOfficeServer) GetByID(context.Context, *IDRequest) (*OfficeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedOfficeServer) FindByCurrent(context.Context, *CurrentRequest) (*OfficeResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByCurrent not implemented")
}
func (UnimplementedOfficeServer) FindInIDs(context.Context, *IDsRequest) (*OfficeResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindInIDs not implemented")
}
func (UnimplementedOfficeServer) Save(context.Context, *OfficeBaseRequest) (*OfficeBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedOfficeServer) mustEmbedUnimplementedOfficeServer() {}

// UnsafeOfficeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfficeServer will
// result in compilation errors.
type UnsafeOfficeServer interface {
	mustEmbedUnimplementedOfficeServer()
}

func RegisterOfficeServer(s grpc.ServiceRegistrar, srv OfficeServer) {
	s.RegisterService(&Office_ServiceDesc, srv)
}

func _Office_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Office/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServer).GetByID(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Office_FindByCurrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServer).FindByCurrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Office/FindByCurrent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServer).FindByCurrent(ctx, req.(*CurrentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Office_FindInIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServer).FindInIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Office/FindInIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServer).FindInIDs(ctx, req.(*IDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Office_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfficeBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficeServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Office/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficeServer).Save(ctx, req.(*OfficeBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Office_ServiceDesc is the grpc.ServiceDesc for Office service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Office_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Office",
	HandlerType: (*OfficeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByID",
			Handler:    _Office_GetByID_Handler,
		},
		{
			MethodName: "FindByCurrent",
			Handler:    _Office_FindByCurrent_Handler,
		},
		{
			MethodName: "FindInIDs",
			Handler:    _Office_FindInIDs_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _Office_Save_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/office.proto",
}
